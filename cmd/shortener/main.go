// Shortener - service for short URL generation.
package main

import (
	_ "net/http/pprof"

	_ "github.com/shulganew/shear.git/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/shulganew/shear.git/internal/app"
	"github.com/shulganew/shear.git/internal/config"
	"github.com/shulganew/shear.git/internal/grpcs/servgrpc"
	"github.com/shulganew/shear.git/internal/service"
	"github.com/shulganew/shear.git/internal/web/router"
	"github.com/shulganew/shear.git/internal/web/servrest"
	"github.com/shulganew/shear.git/pkg/shutdown"
	"go.uber.org/zap"
)

var (
	buildVersion string = "N/A"
	buildDate    string = "N/A"
	buildCommit  string = "N/A"
)

// @Title Shortener API
// @Description Shortener service.
// @Version 1.1

// @Contact.email shulganew@gmail.com

// @BasePath /
// @Host localhost:8080
func main() {
	app.Intro(buildVersion, buildDate, buildCommit)
	app.InitLog()

	// Root app context.
	ctx, cancel := app.InitContext()

	conf := config.NewConfig()

	// If use persistent storage - init it.
	db := app.InitDB(ctx, *conf)

	// Use fan-In pattern for storing data from delete requests.
	delCh := make(chan service.DelBatch, 100)
	defer close(delCh)

	// Init application.
	short, backup, del := app.InitApp(ctx, *conf, db, delCh)

	// Create router.
	rt := router.RouteShear(conf, short, db, del)

	// Error channel.
	componentsErrs := make(chan error, 1)

	// Start web server.
	webDone := servrest.Shortener(ctx, conf, componentsErrs, rt)

	// Start web server.
	grpcDone := servgrpc.Shortener(ctx, short, conf, componentsErrs)

	// Update deleted shorts from common fan-In channel.
	delDone := app.DeleteShort(ctx, short, delCh)

	//Graceful shutdown.
	shutdown.Graceful(ctx, cancel, componentsErrs)

	// Waiting http server shuting down.
	<-webDone

	// Waiting gRPC server shuting down.
	<-grpcDone

	// Waiting delete service.
	<-del.Stop()

	// Waiting async writing deleted shorts to DB.
	<-delDone
	zap.S().Infoln("All shorts from del service are deleted.")

	// Backup all shorts.
	if conf.IsBackup() {
		service.BackupShorts(short, *backup)
	}
	// If use persistent storage - close db.
	if db != nil {
		err := db.Close()
		if err != nil {
			zap.S().Errorln("Error closing DB: ", err)
		} else {
			zap.S().Infoln("DB closed.")
		}
	}
	zap.S().Infoln("App done.")
}
